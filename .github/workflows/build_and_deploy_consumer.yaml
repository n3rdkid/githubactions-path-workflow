name: Consumer Workflow
on:
  push:
    # paths:
    #   - "packages/consumer/**"
    branches:
      - main 
      - develop
    tags:
      - v*
jobs:
  setup_environment:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.get_env.outputs.env }}
    steps:
    - id: get_env
      run: |
        if grep -q "refs/tags/v" <<< ${{github.ref}}; then
          echo "::set-output name=env::PROD"
        else
          echo "::set-output name=env::DEV"
        fi
    - id: print_env
      name: Print environment
      run: echo  "Environment :- ${{ steps.get_env.outputs.env }}"

  build_and_deploy:
    name: Build and deploy the Consumer Package
    runs-on: ubuntu-latest
    needs: setup_environment
    outputs:
      is_consumer: ${{ steps.tag_test.outputs.is_consumer }}
    environment: ${{needs.setup_environment.outputs.env_name}}  
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          fetch-depth: 0
      # - name: Use Node.js
      #   uses: actions/setup-node@v2
      #   with:
      #     node-version: 14.x

      # - name: Get yarn cache directory path
      #   id: yarn-cache-dir-path
      #   run: echo "::set-output name=dir::$(yarn cache dir)"

      # - name: Check dependencies in cache 
      #   id: yarn-cache 
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-

      # - name: Initializing dependencies
      #   if: steps.npm-cache.outputs.cache-hit != 'true'
      #   run:  yarn bootstrap

      # - name: Creating & Initializing env variables 
      #   run: |
      #     echo "ENV_VARIABLES" > .env

      - name : Check for package changes (if tag push)
        id: tag_test
        # if : startsWith(github.ref, 'refs/tags/v')
        shell: bash

        run : | 
          set -x
          old_tag=$(git describe --abbrev=0 --tags --always $(git rev-list --tags --skip=1  --max-count=1)) 
          echo $old_tag
          new_tag=$(git describe --abbrev=0 --tags $(git rev-list --tags --max-count=1))
          echo $new_tag
          if [$old_tag == $new_tag]; then 
           echo "::set-output name=is_consumer::true"
           exit 0
          fi

          diff_files=$(sudo git diff $old_tag $new_tag --name-only | grep -c packages/consumer || true)    
          echo $diff_files
          if [[ ${diff_files} -ne 0 ]]; then
            echo "::set-output name=is_consumer::true"
          fi

      - run: |
          echo ${{steps.tag_test.outputs.is_consumer}}
          echo ${{steps.get_env.outputs.env}}
      # - name: Build the consumer package
      #   if: ${{ steps.tag_test.outputs.is_consumer == 'true' || (github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' )) }}
      #   run: yarn build:gae:consumer

      # - name: Setup Cloud SDK
      #   if: ${{ steps.tag_test.outputs.is_consumer == 'true' || (github.event_name == 'push' && github.ref == 'refs/heads/develop') }}
      #   run: | 
      #     echo "SETUP GCP SDK"

      # - name: Deploy consumer package to Google App Engine
      #   if: ${{steps.tag_test.outputs.is_consumer == 'true' || (github.event_name == 'push' && github.ref == 'refs/heads/develop') }}
      #   run: |
      #     echo "DEPLOY DEPLOY"